# set Zsh as your default Tmux shell
set-option -g default-shell /bin/tcsh

# UTF is great, let us use that
#set -g utf8
#set-window-option -g utf8 on
set -g mouse-utf8 off
set -g set-clipboard off
setw -g monitor-activity on

# Tmux should be pretty, we need 256 color for that
#set -g default-terminal "screen-256color"
#set -g default-terminal "screen-256color"

# Tmux uses a 'control key', let's set it to 'Ctrl-a'
# Reason: 'Ctrl-a' is easier to reach than 'Ctrl-b'
# remap prefix from 'C-b' to 'C-a'
unbind C-b
set-option -g prefix C-Space
bind-key C-Space send-prefix
#bind -n End send-key C-e
#bind -n Home send-key C-a


# Start copy mode when scrolling up and exit when scrolling down to bottom.
# The "#{mouse_any_flag}" check just sends scrolls to any program running that
# has mouse support (like vim).
set -g mouse on
bind -n WheelUpPane if-shell -F -t = "#{mouse_any_flag}" "send-keys -M" "if -Ft= '#{pane_in_mode}' 'send-keys -M' 'copy-mode -e'"


# command delay? We don't want that, make it short
set -sg escape-time 1

# Set the numbering of windows to go from 1 instead
# of 0 - silly programmers :|
#set-option -g base-index 1
#setw -g pane-base-index 1
bind-key -t vi-copy 'v' begin-selection     # Begin selection in copy mode.
bind-key -t vi-copy 'C-v' rectangle-toggle  # Begin selection in copy mode.
bind-key -t vi-copy 'y' copy-selection      # Yank selection in copy mode.
bind p paste-buffer

bind S-j resize-pane -D 1
bind S-k resize-pane -U 1
bind S-l resize-pane -R 1
bind S-h resize-pane -L 1

bind j resize-pane -D 10
bind k resize-pane -U 10
bind l resize-pane -R 10
bind h resize-pane -L 10


# Allow us to reload our Tmux configuration while
# using Tmux
bind r source-file ~/.tmux.conf \; display "Reloaded!"

# Getting interesting now, we use the vertical and horizontal
# symbols to split the screen
# split panes using | and -
bind | split-window -h
bind - split-window -v
unbind '"'
unbind %

#bind -n End send-key C-e
#bind -n Home send-key C-a
#bind -n End send-keys -M
#bind -n Home send-keys -M
#bind -n MouseDown1Pane send-keys -M
#bind -n MouseDrag1Pane send-keys -M

# switch panes using Alt-arrow without prefix
bind -n M-Left select-pane -L
bind -n M-Right select-pane -R
bind -n M-Up select-pane -U
bind -n M-Down select-pane -D

#set -g mode-mouse off
#set -g mouse-resize-pane off
#set -g mouse-select-pane off 
#set -g mouse-select-window off 
#set -g aggressive-resize off
#
#bind m \
#    set -g mode-mouse on \;\
#    set -g mouse-resize-pane on \;\
#    set -g mouse-select-pane on \;\
#    set -g mouse-select-window on \;\
#    set -g aggressive-resize on \;\
#    display 'Mouse:ON'
#
#bind M \
#    set -g mode-mouse off \;\
#    set -g mouse-resize-pane off \;\
#    set -g mouse-select-pane off \;\
#    set -g mouse-select-window off \;\
#    set -g aggressive-resize off \;\
#    display 'Mouse:OFF'


#PREFIX : resize-pane -D 20 (Resizes the current pane down by 20 cells)
#PREFIX : resize-pane -U 20 (Resizes the current pane upward by 20 cells)
#PREFIX : resize-pane -L 20 (Resizes the current pane left by 20 cells)
#PREFIX : resize-pane -R 20 (Resizes the current pane right by 20 cells)
#PREFIX : resize-pane -t 2 20 (Resizes the pane with the id of 2 down by 20 cells)
#PREFIX : resize-pane -t -L 20 (Resizes the pane with the id of 2 left by 20 cells)


#setw -g aggressive-resize on


#new -s  CORE_DEV -n EDITOR vim
#neww -n build /bin/tcsh
#splitw -v -p 50 -t 0 vim
#selectw -t 1 
#selectp -t 0

######################
#### DESIGN CHANGES ###
#######################
#
## panes
set -g pane-border-fg black
set -g pane-active-border-fg brightred
#
### Status bar design
## status line
#set -g status-utf8 on
set -g status-justify left
set -g status-bg default
set -g status-fg colour12
set -g status-interval 2
#
## messaging
set -g message-fg black
set -g message-bg yellow
set -g message-command-fg blue
set -g message-command-bg black
#
##window mode
setw -g mode-bg colour6
setw -g mode-fg colour0
#
## window status
setw -g window-status-format " #F#I:#W#F "
setw -g window-status-current-format " #F#I:#W#F "
setw -g window-status-format "#[fg=magenta]#[bg=black] #I #[bg=cyan]#[fg=colour8] #W "
setw -g window-status-current-format "#[bg=brightmagenta]#[fg=colour8] #I #[fg=colour8]#[bg=colour14] #W "
setw -g window-status-current-bg colour0
setw -g window-status-current-fg colour11
setw -g window-status-current-attr dim
setw -g window-status-bg green
setw -g window-status-fg black
setw -g window-status-attr reverse
#
## Info on left (I don't have a session display for now)
set -g status-left ''
#
## loud or quiet?
set-option -g visual-activity off
set-option -g visual-bell off
set-option -g visual-silence off
set-window-option -g monitor-activity off
set-option -g bell-action none
#
set -g default-terminal "screen-256color"
#
## The modes {
setw -g clock-mode-colour colour135
setw -g mode-attr bold
setw -g mode-fg colour196
setw -g mode-bg colour238
#
## }
## The panes {
#
set -g pane-border-bg colour235
set -g pane-border-fg colour238
set -g pane-active-border-bg colour236
set -g pane-active-border-fg colour51
#
## }
## The statusbar {
#
#set -g status-position bottom
set -g status-bg colour234
set -g status-fg colour137
set -g status-attr dim
set -g status-left ''
set -g status-right '#[fg=colour233,bg=colour241,bold] %d/%m #[fg=colour233,bg=colour245,bold] %H:%M:%S '
set -g status-right-length 50
set -g status-left-length 20

setw -g window-status-current-fg colour81
setw -g window-status-current-bg colour238
setw -g window-status-current-attr bold
setw -g window-status-current-format ' #I#[fg=colour250]:#[fg=colour255]#W#[fg=colour50]#F '

setw -g window-status-fg colour138
setw -g window-status-bg colour235
setw -g window-status-attr none
setw -g window-status-format ' #I#[fg=colour237]:#[fg=colour250]#W#[fg=colour244]#F '
#
setw -g window-status-bell-attr bold
setw -g window-status-bell-fg colour255
setw -g window-status-bell-bg colour1
#
## }
## The messages {
#
set -g message-attr bold
set -g message-fg colour232
set -g message-bg colour166
#
## }


#bind-key R respawn-window

# create a session with a throw-away window
#new true
#
# # for future windows, stay open after the command exits
#set set-remain-on-exit on
#
# # create the windows we really want
#neww -n editor 
#neww -n build 
#splitw -h -p 25 -t 0
#splitw -v -p 50 -t 0



# # for future windows, revert r-o-e to global value
#set -u set-remain-on-exit
